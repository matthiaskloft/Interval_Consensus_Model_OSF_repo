---
title: "Interval Truth Model"
subtitle: "Visualizations of Link Functions Simulation Study"
author: 
 - name: Matthias Kloft
   orcid: 0000-0003-1845-6957
   affiliations: University of Marburg  
 - name: Bj√∂rn S. Siepe
   orcid: 0000-0002-9558-4648
   affiliations: University of Marburg
 - name: Daniel W. Heck
   orcid: 0000-0002-6302-9252
   affiliations: University of Marburg
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    number-sections: true
    theme: cosmo
    code-fold: true
    code-tools: true
    code-summary: "Show the code"
    fig-width: 7
    fig-height: 4.5
    embed-resources: true
execute:
  message: false
  warning: false
---

# Background
In this document, we investigate the results of the small preliminary simulation study on the link functions. 
The results of the main simulation study can be found in the file `src/05_sim_visualizations.Qmd`. 

All errorbars in this document represent $\pm 1$ Monte Carlo Standard Errors.

# Prep

First load all relevant packages: 
```{r load-pkgs}
packages <- c(
  "tidyverse",
  "SimDesign",
  "rstan",
  "here",
  "posterior",
  "bayesplot",
  "psych",
  "ggh4x",
  "ggokabeito",
  "sysfonts",
  "showtext"
)

if (!require("pacman")) install.packages("pacman")
pacman::p_load(packages, update = F, character.only = T)

if(!require("cmdstanr")){
  install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
  library(cmdstanr)
}
  

# default chunk options
knitr::opts_chunk$set(
  fig.height = 7,
  fig.width = 10,
  include = TRUE,
  message = FALSE,
  warning = FALSE
)
source(here("src", "00_functions.R"))

# add google font
sysfonts::font_add_google("News Cycle", "news")
# use showtext
showtext::showtext_auto()
```

# Results

Load data:
```{r}
sim_res_link <- readRDS(here("sim_results", "sim_res_link_function_server.rds"))
```


Prepare data and convert to long format for plotting: 
```{r}
sim_res_itm_long <- sim_res_link |>
  select(
    !c(
      contains("conv"),
      contains("divtrans"),
      contains("_sd"),
      "REPLICATIONS",
      "SIM_TIME",
      "RAM_USED",
      "SEED",
      "COMPLETED",
      "WARNINGS"
    )
  ) |> 
  # delete "_fn_" from every column name
  rename_all( ~ str_remove(., "_fn")) |>
  pivot_longer(
    cols = !c(n_respondents, n_items, link_model, link_dgp),
    names_to = "measure",
    values_to = "value"
  ) |>
  # rename for easier separation
  mutate(measure = str_replace(measure, "abs_bias", "absbias")) |>
  mutate(measure = str_replace(measure, "rel_bias", "relbias")) |>
  # remove only the first underscore
  mutate(measure = sub("_", "", measure, fixed = TRUE)) |>
  separate_wider_delim(measure,
                       names = c("measure", "summary", "pm", "param"),
                       delim = "_") |>
  group_by(link_dgp, n_respondents, n_items, measure, summary, pm) |>
  pivot_wider(names_from = "param", values_from = "value") |>
  ungroup() |>
  mutate(n_respondents = factor(n_respondents)) |>
  # not relevant for the link function
  select(!n_respondents, n_items)
```




## Visualization

### Relative Bias of True Location + Width
The following plot shows the relative bias of the location and width for the different link functions. We crossed the data-generating and modeling link function, such that each link function is applied to the data generated by the other link function and by itself. 

With relative bias, we mean the bias divided by the standard deviation of the true parameter. We did not preregister this outcome measure, but in hindsight, we think that it adds a relevant angle to our interpretation of the results.
```{r}

plot_sim_relbias <- sim_res_itm_long |>
  filter(pm == "relbias") |>
  filter(measure  %in% c("Trloc", "Trwid")) |>
  filter(summary == "mean") |>
  mutate(
    condition = case_when(
      link_model == "ilr" & link_dgp == "ilr" ~ "Self",
      link_model == "sb" & link_dgp == "sb" ~ "Self",
      link_model == "ilr" & link_dgp == "sb" ~ "Cross",
      link_model == "sb" & link_dgp == "ilr" ~ "Cross"
    ) %>% factor(levels = c("Self", "Cross")),
    link_model = case_when(
      link_model == "ilr" ~ "Isometric Log Ratio",
      link_model == "sb" ~ "Stick Breaking"
    ),
    link_dgp = case_when(
      link_dgp == "ilr" ~ "DGP: Isometric Log Ratio",
      link_dgp == "sb" ~ "DGP: Stick Breaking"
    ),
    measure = case_when(measure == "Trloc" ~ "True Location", measure == "Trwid" ~ "True Width")
  ) |>
  ggplot(aes(
    x = condition,
    y = mean,
    color = link_model,
    group = link_model
  )) +
  # add vertical line between different sample sizes
  #geom_vline(colour = "#F3F4F5", xintercept = seq(1.5, 4, 1))+
  geom_point(position = position_dodge(0.7), size = 2.5) +
  geom_errorbar(aes(ymin = mean - 1 * mcse, ymax = mean + 1 * mcse),
                width = .8,
                show.legend = FALSE) +
  ggh4x::facet_grid2(measure~link_dgp, scales = "free_y",
                     axes = TRUE) +
  scale_y_continuous(limits = c(0, NA), expand = expansion()) +
  ggokabeito::scale_color_okabe_ito(order = c(5, 1)) +
  labs(x = "Number of Respondents", y = "Relative Bias", color = "") +
  theme_itm() +
  theme(
    legend.position = "top",
    legend.text = element_text(size = 16),
    text = element_text(size = 22)
  )

plot_sim_relbias

# ggsave(
#   here("plots", "sim_link_function", "sim_lf_relbias.pdf"),
#   plot_sim_relbias,
#   width = 15,
#   height = 20,
#   units = "cm"
# )
```




### Absolute Bias of True Location + Width
The following plot shows the absolute bias of the location and width for the different link functions. 
```{r}
plot_sim_absbias <-
  sim_res_itm_long |>
  filter(pm == "absbias") |>
  filter(measure  %in% c("Trloc", "Trwid")) |>
  filter(summary == "mean") |>
  mutate(
    condition = case_when(
      link_model == "ilr" & link_dgp == "ilr" ~ "Self",
      link_model == "sb" & link_dgp == "sb" ~ "Self",
      link_model == "ilr" & link_dgp == "sb" ~ "Cross",
      link_model == "sb" & link_dgp == "ilr" ~ "Cross"
    ) %>% factor(levels = c("Self", "Cross")),
    link_model = case_when(
      link_model == "ilr" ~ "Isometric Log Ratio",
      link_model == "sb" ~ "Stick Breaking"
    ),
    link_dgp = case_when(
      link_dgp == "ilr" ~ "DGP: Isometric Log Ratio",
      link_dgp == "sb" ~ "DGP: Stick Breaking"
    ),
    measure = case_when(measure == "Trloc" ~ "True Location", measure == "Trwid" ~ "True Width")
  ) |>
  ggplot(aes(
    x = condition,
    y = mean,
    color = link_model,
    group = link_model
  )) +
  # add vertical line between different sample sizes
  #geom_vline(colour = "#F3F4F5", xintercept = seq(1.5, 4, 1))+
  geom_point(position = position_dodge(0.7), size = 2.5) +
  geom_errorbar(aes(ymin = mean - 1 * mcse, ymax = mean + 1 * mcse),
                width = .8,
                show.legend = FALSE) +
  ggh4x::facet_grid2(measure~link_dgp, scales = "free_y",
                     axes = TRUE) +
  scale_y_continuous(limits = c(0, NA), expand = expansion()) +
  ggokabeito::scale_color_okabe_ito(order = c(5, 1)) +
  labs(x = "Number of Respondents", y = "Absolute Bias", color = "") +
  theme_itm() +
  theme(
    legend.position = "top",
    legend.text = element_text(size = 16),
    text = element_text(size = 22)
  )



# ggsave(
#   here("plots", "sim_link_function", "sim_lf_absbias.pdf"),
#   plot_sim_absbias,
#   width = 15,
#   height = 20,
#   units = "cm"
# )
plot_sim_absbias
```



## Numerical Results
To supplement the figures with numerical results, we present a table of the main outcome measure (absolute bias and relative bias) for the true location and true width of the latent distribution.
```{r}
sim_res_link |> 
  select(n_respondents, n_items,
         link_dgp, link_model,
         Tr_interval_mean_fn_abs_bias_mean, Tr_interval_mean_fn_abs_bias_mcse,
         Tr_interval_mean_fn_rel_bias_mean, Tr_interval_mean_fn_rel_bias_mcse) |> 
  pivot_longer(cols = !c(n_items, n_respondents, link_dgp, link_model)) |> 
  # split based on last underscore 
  separate(name, into = c("name", "suffix"), sep = "_(?=[^_]+$)", remove = FALSE) |> 
  pivot_wider(names_from = suffix, values_from = value) |> 
  # remove "mean_fn" from name
  mutate(name = str_remove(name, "_mean_fn")) |> 
  # remove "Tr_interval" from name
  mutate(name = str_remove(name, "Tr_interval_")) |> 
  dplyr::rename(
    "Items" = "n_items",
    "Respondents" = "n_respondents",
    "DGP" = "link_dgp",
    "Model" = "link_model",
    "Measure" = "name",
    "Mean" = "mean",
    "MCSE" = "mcse"
  ) |> 
  mutate(DGP = case_when(
    DGP == "ilr" ~ "Isometric Log Ratio",
    DGP == "sb" ~ "Stick Breaking"
  )) |> 
  mutate(Model = case_when(
    Model == "ilr" ~ "Isometric Log Ratio",
    Model == "sb" ~ "Stick Breaking"
  )) |> 
  mutate(Measure = case_when(
    Measure == "abs_bias" ~ "Absolute Bias",
    Measure == "rel_bias" ~ "Relative Bias"
  )) |> 
  mutate(across(c(Mean, MCSE), ~round(., 4))) |> 
  arrange(DGP) |> 
  knitr::kable()
```


